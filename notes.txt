networking (std::net or quinn)
    - https://github.com/naia-lib/naia

Terrain generation
    -   biome map: look at fast noise lite examples - cellular noise (return type cell value) with simplex domain warp independent
    -   rivers/tunnels: simplex, ping pong fractal type, low octaves, use aggressive spline to take a band of values. try different domain warps
    -   fractal types: RigidMulti makes spikey terrain, Billow makes sand-dune like terrain, Fbm makes more smooth terrain (looks similar to just summing layers)

Models: look into exporting gltf with ktx2 formatted textures
Optimization: use `#[component(storage = "SparseSet")]` for components that will be added/removed frequently (or exist only on a few entities) (https://bevy-cheatbook.github.io/patterns/component-storage.html)
Run criteria for systems that should only run in single/multiplayer or on a timer https://bevy-cheatbook.github.io/programming/run-criteria.html (be careful of event clearing, by deafult happens every frame)
    -   https://bevy-cheatbook.github.io/features/fixed-timestep.html

profiling:
    -   ./capture-release -o my_capture.tracy
    -   cargo run --release --features bevy/trace_tracy

BEFORE RELEASING DEMOS: 
    -   look in mod.rs for things to do
    -   test build on windows and linux

memory leak? investigate mesh handles
    -   not buffer clearing
    -   not meshes leaking
    -   https://github.com/fasterthanlime/mevi 
    -   tracy has memory profiling too   

block entities, two approaches:
    1.  each block entity has &'static dyn BlockEntity
        -   BlockEntity trait has functions for onplace(chunkcoord, blockcoord), ondestroy(chunkcoord, blockcoord), serialize, etc
        -   store block data in DashMap<ChunkCoord, DashMap<ChunkIdx, T>> where T is block data type. This way, onplace/ondestroy functions can take &self and we can easily serialize on a per-chunk basis
    2. each block entity has Entity
        -   Entity has BlockEntity(Vec<id>) component, and whatever other components we need for the blocks functionality.
        -   onplace/ondestroy can be implemented with systems using Added<Component> and Removed<Component>. update Vec<id> in these systems?
        -   serialize can query the entity's blockentity, where each id corresponds to a serializer for a component T which takes in Query<(&BlockEntity, &T)>
        -   placing can be done with id -> bundle map
    go with (2)

meshing updates:
    -   create a ChunkBoundary struct that takes copies blocks from each of its neighbors
        -   https://playspacefarer.com/voxel-meshing-performance/
        -   then we pass that around and don't have to worry about a separate neighbors array.
        -   have to use all 26 neighbors for AO, so the resulting buffer would be (SIZE+2)^3